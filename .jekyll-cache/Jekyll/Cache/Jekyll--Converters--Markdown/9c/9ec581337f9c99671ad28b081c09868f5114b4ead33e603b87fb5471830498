I"á)<p>Ultimamente sto sperimentando con diverse tecnologie per aumentare la mia produttivit√† nel typing ed interagire con il mio sistema operativo. Utilizzo un tiling window manager quindi quasi ogni interazione con il pc √® da tastiera, per questo ho studiato dei modi interessanti per migliorare la mia produttivit√† come macro o layers. In questo post veloce ti condivido delle tecnologie interessanti che ho adottato e che hanno migliorato la mia esperienza nell‚Äôusare il pc da tastiera.</p>

<!--more-->

<hr />

<h2 id="premessa">Premessa</h2>
<p>Io sono un grande fan per quanto riguarda l‚Äôutilizzare tutto da tastiera, odio staccare le dita dai tasti per muovere il mouse, specialmente se sono sul mio desktop dove devo spostare l‚Äôintera mano per raggiungere il mouse. Adoro vim ed i vari shortcuts che offre, allora ho cercato come far funzionare questi shortcuts in ogni applicazione: non soltanto su vim o su applicazioni che supportano una vim mode.</p>

<hr />

<h1 id="tiling-window-manager">Tiling Window Manager</h1>
<p>Per essere chiari, un tiling window manager √® un programma per gestire le finestre <strong>completamente da tastiera</strong>. Tramite delle combinazioni di tasti posso aprire nuove finestre (applicazioni o terminali), muoverle e gestire pi√π desktop (o workspaces se √® pi√π chiaro). Alcuni esempi sono i3, bspwm, awesomeWm, Sway e altri (scusami se non ho messo il tuo preferito). Io personalmente uso Hyprland su Wayland e mi trovo molto bene: √® moderno e funziona in modo eccellente, non ho mai riscontrato problemi gravi nei vari mesi di utilizzo. In aggiunta al window manager, utilizzo dmenu come application launcher cos√¨ posso aprire qualsiasi applicazione, e ho configurato diverse macro come i tasti per cambiare la luminosit√† dello schermo, fare screenshots o gestire il volume degli speakers (non sono cose ovvie quando installi linux da 0 !).</p>

<figure class="image-card width-wide caption">
  <img src="/images/kmonad/wm.png" alt="Hyprland" />
  
  <figcaption class="caption-text">Il mio window manager in questo momento</figcaption>
  
</figure>

<hr />

<h1 id="home-row">Home-row</h1>
<p>Questa √® la mia parte preferita e la ragione per cui ho voluto fare questo post. Quando utilizzi un tiling window manager o usi vari shortcuts su vim o firefox o qualsiasi altra applicazione, utilizzi molto i tasti ‚ÄúMeta‚Äù (o Win), ‚ÄúShift‚Äù, ‚ÄúCtrl‚Äù, ‚ÄúAlt‚Äù. Il problema di questi tasti √® che in una tastiera standard sono scomodi da raggiungere, dovendo spesso staccare le dita dalla linea centrale della tastiera o allungare in modo non naturale il mignolo. L‚Äôidea di homerow √® di mappare questi tasti usati frequentemente nei posti pi√π accessibili della tastiera: proprio la linea centrale. Dopotutto dovresti avere i tasti pi√π frequenti nelle posizioni pi√π comode.</p>

<p>Ho mappato i tasti in questo modo:</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>a -&gt; meta
s -&gt; alt
d -&gt; crtl
f -&gt; shift

j -&gt; shift
k -&gt; ctrl
l -&gt; alt
√≤ -&gt; meta
</code></pre></div></div>
<p>La mappatura √® specchiata cos√¨ posso usare arbitrariamente una delle due mani libere. Per esempio se voglio fare la lettera ‚ÄúR‚Äù maiuscola dovr√≤ premere ‚Äúj + r‚Äù.</p>

<p>Si ma quindi dove vanno a finire i tasti originali che ora hai cambiato? Semplice, sono sempre l√¨. Questa macro viene attivata solo se tengo premuto il tasto, se invece faccio un singolo ‚Äútap‚Äù il tasto registrer√† l‚Äôimpostazione normale. Per essere chiari:</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tap su f -&gt; f
hold su f -&gt; shift
</code></pre></div></div>
<p>Avere i tasti cos√¨ accessibili √® davvero estremamente comodo, anche se non sono particolarmente pi√π veloce, ne vale assolutamente la pena per la comodit√†. Per far funzionare la homerow ho utilizzato un programma che si chiama kmonad che vedremo pi√π avanti, dopo aver introdotto i layers.</p>

<h2 id="keyboard-layers">Keyboard Layers</h2>
<p>Un modo per espandere sull‚Äôidea di mappare funzionalit√† sulla tastiera √® quello dei layers. Premendo un tasto o tenendolo premuto, posso andare a cambiare la funzionalit√† di atri tasti, organizzati in layers. Posso per esempio avere un layer di shortcuts alla vim oppure un layer che mi mappa i numeri in modo che siano pi√π comodi da raggiungere. Posso poi switchare tra un layer ed un‚Äôaltro con un bottone o una combinazione di bottoni. I layers sono molto potenti e specifici per le proprie esigenze, ti mostrer√≤ quello che uso io qua sotto.</p>

<hr />

<h1 id="kmonad">Kmonad</h1>
<p><a href="https://github.com/kmonad/kmonad">Kmonad</a> √® un programma che ci permette di fare quanto detto sopra. Funziona con qualsiasi tastiera e con qualsiasi pc, ma su linux diversamente da windows ha il supporto dal kernel quindi √® estremamente veloce. Puoi configurare shortcuts e layers da un file di configurazione, nella cartella <code class="highlighter-rouge">keymap/</code> della repo di github trovi in tutorial completo e dettagliato con tutto quello che puoi fare.</p>

<p>Ti spiego come ho configurato io la mia tastiera, se vuoi sapere di pi√π su come kmonad funziona ti consiglio di dare un‚Äôocchiata alla repo.</p>

<p>Questa √® la configurazione default di una tastiera Italiana 100%:</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(defsrc
  esc  f1   f2   f3   f4   f5   f6   f7   f8   f9   f10  f11  f12        ssrq slck pause
  grv  1    2    3    4    5    6    7    8    9    0    -    =    bspc  ins  home pgup  nlck kp/  kp*  kp-
  tab  q    w    e    r    t    y    u    i    o    p    [    ]    ret   del  end  pgdn  kp7  kp8  kp9  kp+
  caps a    s    d    f    g    h    j    k    l    ;    '    \                          kp4  kp5  kp6
  lsft 102d z    x    c    v    b    n    m    ,    .    /    rsft            up         kp1  kp2  kp3  kprt
  lctl lmet lalt           spc                 ralt rmet cmp  rctl       left down rght  kp0  kp.
)
</code></pre></div></div>
<p>Ho ridefinito i seguenti layers per gli shortcuts di vim e una tastiera per i numeri:</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(deflayer numbers
  _    _    _    _    _    _    _    _    _    _    _    _    _          _    _    _
  _    _    _    _    _    _    _    _    _    _    _    _    _    _     _    _    _    _    _    _    _
  _    _    _    _    _    _    XX   /    7    8    9    -    _    _     _    _    _    _    _    _    _
  _    _    _    _    _    _    XX   *    4    5    6    +    _                         _    _    _
  _    _    _    _    _    _    XX   0    1    2    3    _    _               _         _    _    _    _
  _    _    _              _                   _    _    _    _          _    _    _    _    _
)

(deflayer vimkeys
  _    _    _    _    _    _    _    _    _    _    _    _    _          _    _    _
  _    _    _    _    _    _    _    _    _    _    _    _    _    _     _    _    _    _    _    _    _
  _    _    _    _    _    _    _    _    _    _    _    _    _    _     _    _    _    _    _    _    _
  _    _    _    _    _    _  left down  up  right  _    _    _                         _    _    _
  _    _    _    _    _    _    _    _    _    _    _    _    _               _         _    _    _    _
  _    _    _              _                   _    _    _    _          _    _    _    _    _
)
</code></pre></div></div>
<p>Ho creato degli alias per cambiare layers in questo modo:</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(defalias
  ;; alias_name ( ;; function to execute )
  num  (layer-toggle numbers) ;; Bind num to a button that switches to a layer
  vimkeys  (layer-toggle vimkeys)
)

;; Homerow!
;; https://precondition.github.io/home-row-mods
(defalias
    met_a (tap-hold-next-release 200 a lmet) ;; tap = a, hold for 200ms = lmet (meta)
    alt_s (tap-hold-next-release 200 s lalt)
    ctl_d (tap-hold-next-release 200 d lctl)
    sft_f (tap-hold-next-release 200 f lsft)

    sft_j (tap-hold-next-release 200 j rsft)
    ctl_k (tap-hold-next-release 200 k rctl)
    alt_l (tap-hold-next-release 200 l lalt)
    met_; (tap-hold-next-release 200 ; rmet)
    
    num_g (tap-hold-next-release 200 g @num)
    vim_v (tap-hold-next-release 200 v @vimkeys)
)
</code></pre></div></div>
<p>E li ho messi in questo modo:</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(deflayer homerow
  esc  f1   f2   f3   f4   f5   f6   f7   f8   f9   f10  f11  f12        ssrq slck pause
  grv  1    2    3    4    5    6    7    8    9    0    -    =    bspc  ins  home pgup  nlck kp/  kp*  kp-
  tab  q    w    e    r    t    y    u    i    o    p    [    ]    ret   del  end  pgdn  kp7  kp8  kp9  kp+
  caps @met_a @alt_s @ctl_d @sft_f @num_g h  @sft_j @ctl_k @alt_l @met_;  '  \           kp4  kp5  kp6
  lsft 102d z    x    c  @vim_v b    n    m    ,    .    /    rsft            up         kp1  kp2  kp3  kprt
  lctl lmet lalt           spc                 ralt rmet cmp  rctl       left down rght  kp0  kp.
)
</code></pre></div></div>

<hr />

<h1 id="layouts-diversi-da-qwerty">Layouts diversi da QWERTY</h1>

<p>Il layout standard internazionale per le tastiere √® chiamato ‚ÄúQWERTY‚Äù semplicemente perch√© i primi tasti in ordine sono proprio q, w, e‚Ä¶ Questo layout √® stato ideato nel 1932 per le macchine da scrivere, infatti queste macchine rischiavano di incepparsi se venivano premuti due tasti vicini uno dopo l‚Äôaltro quindi di √® deciso di distanziare il pi√π possibile i tasti pi√π frequenti. Esistono tante alternative a qwerty che sono invece pensate per essere pi√π comode da usare per la scrittura o in modo pi√π specifico per la programmazione come la Workman. Se vuoi approfondire puoi leggere  <a href="https://kinesis-ergo.com/switching-from-qwerty/">questo</a> articolo.</p>

<figure class="image-card width-wide caption">
  <img src="/images/kmonad/workman.png" alt="Workman" />
  
  <figcaption class="caption-text">Workman keyboard layout</figcaption>
  
</figure>
<hr />

<h1 id="conclusione">Conclusione</h1>
<p>Mi trovo molto bene con la home-row e penso sia un piccolo miglioramento estremamente figo e da nerd che mi piace parecchio. Esiste un modo dietro alle tastiere, per esempio tanti utilizzano una tastiera divisa a met√†, oppure mouse alternativi. Chiss√† magari in futuro li prover√≤ anche io, ma per ora cerco di non fare acquisti non essenziali e questo che ho fatto √® totalmente cost free.</p>
:ET